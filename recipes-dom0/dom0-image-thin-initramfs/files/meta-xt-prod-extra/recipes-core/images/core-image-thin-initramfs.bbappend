require inc/xt_shared_env.inc

DEPENDS += "u-boot-mkimage-native"

inherit deploy

#Add Xen and additional packages to build
IMAGE_INSTALL_append = " \
    xen-xencommons \
    xen-xenstat \
    xen-misc \
    dom0 \
    dom0-run-vcpu_pin \
    dom0-run-set_root_dev \
    domd \
    domd-run \
    domd-install-artifacts \
"

XT_GUESTS_INSTALL ?= "doma domf"

python __anonymous () {
    guests = d.getVar("XT_GUESTS_INSTALL", True).split()
    if "doma" in guests :
        d.appendVar("IMAGE_INSTALL", " doma doma-run doma-install-artifacts")
    if "domf" in guests :
        d.appendVar("IMAGE_INSTALL", " domf domf-run domf-install-artifacts")
    if "domr" in guests :
        d.appendVar("IMAGE_INSTALL", " domr domr-run domr-install-artifacts")
    if "domu" in guests :
        d.appendVar("IMAGE_INSTALL", " domu domu-run domu-install-artifacts")
}

IMAGE_ROOTFS_SIZE = "65535"

WKS_FILE = "prod-devel.wks"
IMAGE_FSTYPES += "wic.xz wic.bmap"

#Do not update /etc/fstab
WIC_CREATE_EXTRA_ARGS_append = " --no-fstab-update"

#Folder where we collect boot partition contents
DOM0_BOOT_FILES_DIR = "${DEPLOY_DIR_IMAGE}/bootfiles"

#Tell wic to take boot files from the file system
WIC_CREATE_EXTRA_ARGS_append = " --rootfs-dir rootfs_boot=${DOM0_BOOT_FILES_DIR}"

addtask collect_artifacts after do_image_cpio before do_image_wic
do_collect_artifacts() {
    # Generate u-boot image for initramfs
    ${STAGING_BINDIR_NATIVE}/uboot-mkimage -A arm64 -O linux -T ramdisk -C gzip -n "uInitramfs" \
         -d ${DEPLOYDIR}-image-complete/${IMAGE_LINK_NAME}.cpio.gz ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.cpio.gz.uInitramfs
    ln -sfr  ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.cpio.gz.uInitramfs ${DEPLOY_DIR_IMAGE}/uInitramfs

    # Collect all the boot files
    rm -rf ${DOM0_BOOT_FILES_DIR}
    install -d ${DOM0_BOOT_FILES_DIR}

    # Install boot files built by DomD into Dom0 deploy dir,
    # so all the artifacts required for flashing are at the same place

    find ${XT_DIR_ABS_SHARED_BOOT_DOMD}/* -type f | xargs -I{} cp -f {} ${DEPLOY_DIR_IMAGE}

    # Copy all the boot files generated by DomD...
    if [ -f ${XT_DIR_ABS_SHARED_BOOT_DOMD}/dom0.dtb ]; then
        cp -fL ${XT_DIR_ABS_SHARED_BOOT_DOMD}/dom0.dtb ${DOM0_BOOT_FILES_DIR}
    fi
    # copy xen and xen policy
     if [ -d ${XT_DIR_ABS_SHARED_BOOT_DOMD}/xen ]; then
        ls ${DEPLOY_DIR_IMAGE}/xen-*.uImage | head -1 | xargs -I{} ln -sfr {} ${DOM0_BOOT_FILES_DIR}/xen
        ls ${DEPLOY_DIR_IMAGE}/xenpolicy-* | head -1 | xargs -I{} ln -sfr {} ${DOM0_BOOT_FILES_DIR}/xenpolicy
    fi
    # but use the kernel from Dom0
    ln -sfr ${DEPLOY_DIR_IMAGE}/Image ${DOM0_BOOT_FILES_DIR}
    # and use initramfs image of Dom0
    ln -sfr ${DEPLOY_DIR_IMAGE}/uInitramfs ${DOM0_BOOT_FILES_DIR}

    # Make DomD root file system visible to wic, put it under DEPLOY_DIR_IMAGE
    ls ${XT_DIR_ABS_SHARED_BOOT_DOMD}/*.ext4 | head -1 | xargs -I{} cp -f {} ${DEPLOY_DIR_IMAGE}/domd.ext4
    ls ${XT_DIR_ABS_SHARED_BOOT_DOMU}/*.ext4 | head -1 | xargs -I{} cp -f {} ${DEPLOY_DIR_IMAGE}/domu.ext4
}

populate_vmlinux () {
    find ${STAGING_KERNEL_BUILDDIR} -iname "vmlinux*" -exec mv {} ${DEPLOY_DIR_IMAGE} \; || true
}

IMAGE_POSTPROCESS_COMMAND += " populate_vmlinux; "
